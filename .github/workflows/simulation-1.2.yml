#
#  Copyright (c) 2020, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

name: Simulation 1.2

on: [push, pull_request]

jobs:

  cancel-previous-runs:
    runs-on: ubuntu-latest
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      if: "github.ref != 'refs/heads/master'"

  thread-1-2:
    name: thread-1-2-${{ matrix.compiler.c }}-${{ matrix.arch }}
    runs-on: ubuntu-18.04
    env:
      CFLAGS: -${{ matrix.arch }}
      CXXFLAGS: -${{ matrix.arch }}
      LDFLAGS: -${{ matrix.arch }}
      COVERAGE: 1
      THREAD_VERSION: 1.2
      VIRTUAL_TIME: 1
      INTER_OP: 1
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    strategy:
      matrix:
        compiler: [{c: "gcc", cxx: "g++", gcov: "gcc"}, { c: "clang", cxx: "clang++", gcov: "llvm"}]
        arch: ["m32", "m64"]
    steps:
    - uses: actions/checkout@v2
    - name: Bootstrap
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo apt-get update
        sudo apt-get --no-install-recommends install -y g++-multilib ninja-build python3-setuptools python3-wheel llvm lcov
        python3 -m pip install -r tests/scripts/thread-cert/requirements.txt
    - name: Build
      run: |
        ./bootstrap
        ./script/test build
    - name: Run
      run: |
        ./script/test unit
        ./script/test cert_suite tests/scripts/thread-cert/v1_2_*
    - uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: thread-1-2-${{ matrix.compiler.c }}-${{ matrix.arch }}-pcaps
        path: "*.pcap"
    - name: Keep-1-2-only
      run: |
        ./script/test tar simulation 1.1
        ./script/test tar simulation 1.2-bbr
    - name: Generate Coverage
      run: |
        ./script/test generate_coverage "${{ matrix.compiler.gcov }}"
    - uses: actions/upload-artifact@v2
      with:
        name: cov-thread-1-2-${{ matrix.compiler.c }}-${{ matrix.arch }}-1
        path: tmp/coverage.info
    - name: Keep-1-2-bbr-only
      run: |
        ./script/test tar simulation 1.2
        ./script/test untar simulation 1.2-bbr
    - name: Generate Coverage
      run: |
        ./script/test generate_coverage "${{ matrix.compiler.gcov }}"
    - uses: actions/upload-artifact@v2
      with:
        name: cov-thread-1-2-${{ matrix.compiler.c }}-${{ matrix.arch }}-2
        path: tmp/coverage.info
    - name: Keep-1-1-only
      run: |
        ./script/test tar simulation 1.2-bbr
        ./script/test untar simulation 1.1
    - name: Generate Coverage
      run: |
        ./script/test generate_coverage "${{ matrix.compiler.gcov }}"
    - uses: actions/upload-artifact@v2
      with:
        name: cov-thread-1-2-${{ matrix.compiler.c }}-${{ matrix.arch }}-3
        path: tmp/coverage.info

  packet-verification-low-power:
    runs-on: ubuntu-18.04
    env:
      REFERENCE_DEVICE: 1
      VIRTUAL_TIME: 1
      COVERAGE: 1
      PACKET_VERIFICATION: 1
      THREAD_VERSION: 1.2
      MAC_FILTER: 1
      INTER_OP: 1
    steps:
    - uses: actions/checkout@v2
    - name: Bootstrap
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo apt-get update
        sudo apt-get --no-install-recommends install -y g++-multilib python3-setuptools python3-wheel ninja-build lcov
        python3 -m pip install -r tests/scripts/thread-cert/requirements.txt
    - name: Build
      run: |
        ./script/test build
    - name: Get Thread-Wireshark
      run: |
        ./script/test get_thread_wireshark
    - name: Run
      run: |
        for i in {1..10}
        do
          ./script/test cert_suite ./tests/scripts/thread-cert/v1_2_LowPower*.py
        done
    - uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: packet-verification-low-power-pcaps
        path: |
          *.pcap
          *.json
    - name: Keep-1-2-only
      run: |
        ./script/test tar simulation 1.2-bbr
    - name: Generate Coverage
      run: |
        ./script/test generate_coverage gcc
    - uses: actions/upload-artifact@v2
      with:
        name: cov-packet-verification-low-power-1
        path: tmp/coverage.info
    - name: Keep-1-2-bbr-only
      run: |
        ./script/test tar simulation 1.2
        ./script/test untar simulation 1.2-bbr
    - name: Generate Coverage
      run: |
        ./script/test generate_coverage gcc
    - uses: actions/upload-artifact@v2
      with:
        name: cov-packet-verification-low-power-2
        path: tmp/coverage.info

  packet-verification-1-1-on-1-2:
    runs-on: ubuntu-18.04
    env:
      REFERENCE_DEVICE: 1
      VIRTUAL_TIME: 1
      PACKET_VERIFICATION: 1
      THREAD_VERSION: 1.2
    steps:
    - uses: actions/checkout@v2
    - name: Bootstrap
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo apt-get update
        sudo apt-get --no-install-recommends install -y g++-multilib python3-setuptools python3-wheel ninja-build lcov
        python3 -m pip install -r tests/scripts/thread-cert/requirements.txt
    - name: Build
      run: |
        ./script/test build
    - name: Get Thread-Wireshark
      run: |
        ./script/test get_thread_wireshark
    - name: Run
      run: |
        for i in {1..3}
        do
          ./script/test cert_suite ./tests/scripts/thread-cert/Cert_*.py
        done
    - uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: packet-verification-1.1-on-1.2-pcaps
        path: |
          *.pcap
          *.json
    - name: Generate Coverage
      run: |
        ./script/test generate_coverage gcc
    - uses: actions/upload-artifact@v2
      with:
        name: cov-packet-verification-1-1-on-1-2
        path: tmp/coverage.info

  expects:
    runs-on: ubuntu-18.04
    env:
      COVERAGE: 1
      THREAD_VERSION: 1.2
      VIRTUAL_TIME: 0
    steps:
    - uses: actions/checkout@v2
    - name: Bootstrap
      run: |
        sudo apt-get --no-install-recommends install -y expect ninja-build lcov
    - name: Run RCP Mode
      run: |
        OT_OPTIONS=-DOT_READLINE=OFF OT_NODE_TYPE=rcp ./script/test build expect
    - name: Keep-1-2-only
      run: |
        ./script/test tar posix 1.2-bbr
        ./script/test tar simulation 1.2-bbr
    - name: Keep POSIX Only
      run: |
        ./script/test tar simulation 1.2
    - name: Generate Coverage
      run: |
        ./script/test generate_coverage gcc
    - uses: actions/upload-artifact@v2
      with:
        name: cov-expects
        path: tmp/coverage.info

  thread-1-2-backbone:
    runs-on: ubuntu-18.04
    env:
      REFERENCE_DEVICE: 1
      VIRTUAL_TIME: 0
      PACKET_VERIFICATION: 1
      THREAD_VERSION: 1.2
      INTER_OP: 1
      COVERAGE: 1
      MULTIPLY: 1
      PYTHONUNBUFFERED: 1
      VERBOSE: 1
    steps:
    - uses: actions/checkout@v2
    - name: Build OTBR Docker
      run: |
        ./script/test build_otbr_docker
    - name: Bootstrap
      run: |
        sudo rm /etc/apt/sources.list.d/* && sudo apt-get update
        sudo apt-get --no-install-recommends install -y python3-setuptools python3-wheel ninja-build socat lcov
        python3 -m pip install -r tests/scripts/thread-cert/requirements.txt
    - name: Build
      run: |
        ./script/test build
    - name: Get Thread-Wireshark
      run: |
        ./script/test get_thread_wireshark
    - name: Run
      run: |
        export CI_ENV="$(bash <(curl -s https://codecov.io/env)) -e GITHUB_ACTIONS -e COVERAGE"
        echo "CI_ENV=${CI_ENV}"
        sudo -E ./script/test cert_suite ./tests/scripts/thread-cert/backbone/*.py || (sudo chmod a+r *.log *.json *.pcap && false)
    - uses: actions/upload-artifact@v2
      with:
        name: cov-thread-1-2-backbone-docker
        path: /tmp/coverage/
    - uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: thread-1-2-backbone-results
        path: |
          *.pcap
          *.json
          *.log
    - name: Generate Coverage
      run: |
        ./script/test generate_coverage gcc
    - uses: actions/upload-artifact@v2
      with:
        name: cov-thread-1-2-backbone
        path: tmp/coverage.info

  upload-coverage:
    needs:
    - thread-1-2
    - packet-verification-low-power
    - packet-verification-1-1-on-1-2
    - expects
    - thread-1-2-backbone
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Bootstrap
      run: |
        sudo apt-get --no-install-recommends install -y lcov
    - uses: actions/download-artifact@v2
      with:
        path: coverage/
    - name: Upload Coverage
      run: |
        script/test upload_codecov
