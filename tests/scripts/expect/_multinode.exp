#!/usr/bin/expect -f
#
#  Copyright (c) 2020, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

source "tests/scripts/expect/_common.exp"

proc setup_two_nodes {{childmode {r}} {should_spawn_node true}} {
    # Sets up a Thread network with 2 nodes, spawn_1 as the leader and spawn_2
    # as a child.
    set psk "J01NME"

    if {$should_spawn_node} {
        spawn_node 2
    } else {
        switch_node 2
    }
    send "eui64\n"
    expect -re {([0-9a-f]{16})}
    set eui64 $expect_out(1,string)
    expect "Done"

    # Sets up a Thread network with node 1 as the leader.
    if {$should_spawn_node} {
        spawn_node 1
    } else {
        switch_node 1
    }
    setup_leader

    send "commissioner start\n"
    expect "Done"
    expect "Commissioner: active"
    send "commissioner joiner add $eui64 $psk\n"
    expect "Done"
    wait_for "netdata steeringdata check $eui64" "Done"
    send "channel\n"
    expect -re {(\d+)}
    set channel $expect_out(1,string)
    expect "Done"

    switch_node 2
    send "mode $childmode\n"
    expect "Done"
    send "ifconfig up\n"
    expect "Done"
    send "joiner start $psk\n"
    expect "Done"
    wait_for "" "Join success"
    send "thread start\n"
    expect "Done"
    wait_for "state" "child"
    expect "Done"
}
