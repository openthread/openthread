#!/usr/bin/expect -f
#
#  Copyright (c) 2020, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

proc wait_for {command success {failure {[\r\n]FAILURE_NOT_EXPECTED[\r\n]}}} {
    set result 0
    set timeout 1
    for {set i 0} {$i < 20} {incr i} {
        if {$command != ""} {
            send "$command\n"
        }

        expect {
            -re $success {
                set result 1
            }
            -re $failure {
                exit 1
            }
            timeout {
                # Do nothing
            }
        }
        if {$result == 1} {
            break
        }
    }
    if {$result == 0} {
        exit 1
    }
}

proc spawn_node {id {type ""}} {
    global spawn_id
    global spawn_ids

    if {${type} == ""} {
        set type $::env(OT_NODE_TYPE)
    }

    send_user "\n# ${id} ${type}\n"

    switch ${type} {
        rcp {
            spawn $::env(OT_POSIX_APPS)/ot-cli "spinel+hdlc+uart://$::env(OT_SIMULATION_APPS)/ncp/ot-rcp?forkpty-arg=$id"
            send "routerselectionjitter 1\n"
            expect "Done"
        }
        cli {
            spawn $::env(OT_SIMULATION_APPS)/cli/ot-cli-ftd $id
            send "routerselectionjitter 1\n"
            expect "Done"
        }
        mtd {
            spawn $::env(OT_SIMULATION_APPS)/cli/ot-cli-mtd $id
        }
    }

    expect_after {
        timeout { exit 1 }
    }

    set spawn_ids($id) $spawn_id

    return $spawn_id
}

proc switch_node {id} {
    global spawn_ids
    global spawn_id

    send_user "\n# ${id}\n"
    set spawn_id $spawn_ids($id)
}

proc dispose_node {id} {
    switch_node $id
    send "\x04"
    expect eof
}

proc setup_leader {} {
    send "dataset init new\n"
    expect "Done"
    send "dataset commit active\n"
    expect "Done"
    send "ifconfig up\n"
    expect "Done"
    send "thread start\n"
    expect "Done"
    wait_for "state" "leader"
    expect "Done"
}

proc dispose_all {} {
    global spawn_ids
    set max_node [array size spawn_ids]
    for {set i 1} {$i <= $max_node} {incr i} {
        dispose_node $i
    }
}

proc get_mleid {} {
    send "ipaddr mleid\n"
    expect "ipaddr mleid"
    expect -re {(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4})}
    set rval $expect_out(1,string)
    expect "Done"

    return $rval
}

proc get_extaddr {} {
    send "extaddr\n"
    expect -re {([0-9a-fA-F]{16})}
    set rval $expect_out(1,string)
    expect "Done"

    return $rval
}

set timeout 10
