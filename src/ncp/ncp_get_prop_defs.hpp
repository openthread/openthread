/*
 *    Copyright (c) 2016-17, The OpenThread Authors.
 *    All rights reserved.
 *
 *    Redistribution and use in source and binary forms, with or without
 *    modification, are permitted provided that the following conditions are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. Neither the name of the copyright holder nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 *    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
 *    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @file
 *   This file contains list of NCP Spinel properties supporting "get" operation.
 */

/**
 * This file is used/included for two purposes:
 *
 *    1) From `NcpBase` class definition to declare the property handler methods.
 *    2) From the definition of `mGetPropertyHandlerTable` to match the properties with their handler methods.
 *
 * The following macro(s) are used by this file:
 *
 *    NCP_GET_PROP(name)
 *    NCP_GET_PROP_METHOD(name, method)  (optional)
 *
 * `name` is the name of spinel property (excluding the `SPINEL_PROP_` prefix),
 * `method` provides the name of handler function (in cases that it differs from the property name, e.g., for counters).
 *
 * The macro `NCP_GET_PROP_METHOD()` is optional and if not provided, a default `NCP_GET_PROP()` is used in its place.
 *
 * NOTE: At the end of this file the above macros are `#undef`ed.
 *
 */

#ifndef NCP_GET_PROP
#error Undefined `NCP_GET_PROP` macro.
#endif

// If `NCP_GET_PROP_METHOD()` is not provided, map it to `NCP_GET_PROP()` ignoring the `method` input parameter.
#ifndef NCP_GET_PROP_METHOD
#define NCP_GET_PROP_METHOD(name, method) NCP_GET_PROP(name)
#endif

// Properties supporting "get" operation

    NCP_GET_PROP(LAST_STATUS)
    NCP_GET_PROP(PROTOCOL_VERSION)
    NCP_GET_PROP(INTERFACE_TYPE)
    NCP_GET_PROP(VENDOR_ID)
    NCP_GET_PROP(CAPS)
    NCP_GET_PROP(NCP_VERSION)
    NCP_GET_PROP(INTERFACE_COUNT)
    NCP_GET_PROP(POWER_STATE)
    NCP_GET_PROP(HWADDR)
    NCP_GET_PROP(LOCK)
    NCP_GET_PROP(HOST_POWER_STATE)
    NCP_GET_PROP(UNSOL_UPDATE_FILTER)
    NCP_GET_PROP(UNSOL_UPDATE_LIST)
    NCP_GET_PROP(PHY_ENABLED)
    NCP_GET_PROP(PHY_FREQ)
    NCP_GET_PROP(PHY_CHAN_SUPPORTED)
    NCP_GET_PROP(PHY_CHAN)
    NCP_GET_PROP(PHY_RSSI)
    NCP_GET_PROP(PHY_TX_POWER)
    NCP_GET_PROP(PHY_RX_SENSITIVITY)
    NCP_GET_PROP(MAC_SCAN_STATE)
    NCP_GET_PROP(MAC_SCAN_MASK)
    NCP_GET_PROP(MAC_SCAN_PERIOD)
    NCP_GET_PROP(MAC_15_4_PANID)
    NCP_GET_PROP(MAC_15_4_LADDR)
    NCP_GET_PROP(MAC_15_4_SADDR)
    NCP_GET_PROP(MAC_RAW_STREAM_ENABLED)
    NCP_GET_PROP(MAC_PROMISCUOUS_MODE)
    NCP_GET_PROP(MAC_EXTENDED_ADDR)
    NCP_GET_PROP(MAC_DATA_POLL_PERIOD)
    NCP_GET_PROP(NET_SAVED)
    NCP_GET_PROP(NET_IF_UP)
    NCP_GET_PROP(NET_STACK_UP)
    NCP_GET_PROP(NET_ROLE)
    NCP_GET_PROP(NET_NETWORK_NAME)
    NCP_GET_PROP(NET_XPANID)
    NCP_GET_PROP(NET_MASTER_KEY)
    NCP_GET_PROP(NET_KEY_SEQUENCE_COUNTER)
    NCP_GET_PROP(NET_PARTITION_ID)
    NCP_GET_PROP(NET_KEY_SWITCH_GUARDTIME)
    NCP_GET_PROP(THREAD_LEADER_ADDR)
    NCP_GET_PROP(THREAD_PARENT)
    NCP_GET_PROP(THREAD_NEIGHBOR_TABLE)
    NCP_GET_PROP(THREAD_LEADER_RID)
    NCP_GET_PROP(THREAD_LEADER_WEIGHT)
#if OPENTHREAD_ENABLE_BORDER_ROUTER
    NCP_GET_PROP(THREAD_NETWORK_DATA)
    NCP_GET_PROP(THREAD_STABLE_NETWORK_DATA)
#endif
    NCP_GET_PROP(THREAD_NETWORK_DATA_VERSION)
    NCP_GET_PROP(THREAD_STABLE_NETWORK_DATA_VERSION)
    NCP_GET_PROP(THREAD_LEADER_NETWORK_DATA)
    NCP_GET_PROP(THREAD_STABLE_LEADER_NETWORK_DATA)
    NCP_GET_PROP(THREAD_OFF_MESH_ROUTES)
    NCP_GET_PROP(THREAD_ASSISTING_PORTS)
    NCP_GET_PROP(THREAD_ALLOW_LOCAL_NET_DATA_CHANGE)
#if OPENTHREAD_ENABLE_COMMISSIONER && OPENTHREAD_FTD
    NCP_GET_PROP(THREAD_COMMISSIONER_ENABLED)
#endif
#if OPENTHREAD_ENABLE_MAC_FILTER
    NCP_GET_PROP(MAC_WHITELIST)
    NCP_GET_PROP(MAC_WHITELIST_ENABLED)
    NCP_GET_PROP(MAC_BLACKLIST)
    NCP_GET_PROP(MAC_BLACKLIST_ENABLED)
    NCP_GET_PROP(MAC_FIXED_RSS)
#endif
    NCP_GET_PROP(THREAD_MODE)
    NCP_GET_PROP(THREAD_CHILD_TIMEOUT)
    NCP_GET_PROP(THREAD_RLOC16)
    NCP_GET_PROP(THREAD_ON_MESH_NETS)
    NCP_GET_PROP(NET_REQUIRE_JOIN_EXISTING)
    NCP_GET_PROP(IPV6_ML_PREFIX)
    NCP_GET_PROP(IPV6_ML_ADDR)
    NCP_GET_PROP(IPV6_LL_ADDR)
    NCP_GET_PROP(IPV6_ADDRESS_TABLE)
    NCP_GET_PROP(IPV6_ROUTE_TABLE)
    NCP_GET_PROP(IPV6_ICMP_PING_OFFLOAD)
    NCP_GET_PROP(IPV6_MULTICAST_ADDRESS_TABLE)
    NCP_GET_PROP(THREAD_RLOC16_DEBUG_PASSTHRU)
    NCP_GET_PROP(THREAD_DISCOVERY_SCAN_JOINER_FLAG)
    NCP_GET_PROP(THREAD_DISCOVERY_SCAN_ENABLE_FILTERING)
    NCP_GET_PROP(THREAD_DISCOVERY_SCAN_PANID)
    NCP_GET_PROP(STREAM_NET)
#if OPENTHREAD_FTD
    NCP_GET_PROP(THREAD_CHILD_TABLE)
    NCP_GET_PROP(THREAD_LOCAL_LEADER_WEIGHT)
    NCP_GET_PROP(THREAD_ROUTER_ROLE_ENABLED)
    NCP_GET_PROP(NET_PSKC)
    NCP_GET_PROP(THREAD_CHILD_COUNT_MAX)
    NCP_GET_PROP(THREAD_ROUTER_UPGRADE_THRESHOLD)
    NCP_GET_PROP(THREAD_ROUTER_DOWNGRADE_THRESHOLD)
    NCP_GET_PROP(THREAD_CONTEXT_REUSE_DELAY)
    NCP_GET_PROP(THREAD_NETWORK_ID_TIMEOUT)
    NCP_GET_PROP(THREAD_ROUTER_SELECTION_JITTER)
#endif
#if OPENTHREAD_ENABLE_JAM_DETECTION
    NCP_GET_PROP(JAM_DETECT_ENABLE)
    NCP_GET_PROP(JAM_DETECTED)
    NCP_GET_PROP(JAM_DETECT_RSSI_THRESHOLD)
    NCP_GET_PROP(JAM_DETECT_WINDOW)
    NCP_GET_PROP(JAM_DETECT_BUSY)
    NCP_GET_PROP(JAM_DETECT_HISTORY_BITMAP)
#endif
#if OPENTHREAD_ENABLE_TMF_PROXY && OPENTHREAD_FTD
    NCP_GET_PROP(THREAD_TMF_PROXY_ENABLED)
#endif
    // MAC counters
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_TOTAL,        MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_ACK_REQ,      MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_ACKED,        MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_NO_ACK_REQ,   MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_DATA,         MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_DATA_POLL,    MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_BEACON,       MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_BEACON_REQ,   MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_OTHER,        MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_RETRY,        MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_UNICAST,      MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_PKT_BROADCAST,    MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_ERR_CCA,          MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_ERR_ABORT,        MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_TOTAL,        MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_DATA,         MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_DATA_POLL,    MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_BEACON,       MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_BEACON_REQ,   MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_OTHER,        MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_FILT_WL,      MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_FILT_DA,      MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_UNICAST,      MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_BROADCAST,    MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_ERR_EMPTY,        MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_ERR_UKWN_NBR,     MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_ERR_NVLD_SADDR,   MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_ERR_SECURITY,     MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_ERR_BAD_FCS,      MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_ERR_OTHER,        MAC_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_PKT_DUP,          MAC_CNTR)
    // NCP counters
    NCP_GET_PROP_METHOD(CNTR_TX_IP_SEC_TOTAL,     NCP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_IP_INSEC_TOTAL,   NCP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_IP_DROPPED,       NCP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_IP_SEC_TOTAL,     NCP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_IP_INSEC_TOTAL,   NCP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_IP_DROPPED,       NCP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_TX_SPINEL_TOTAL,     NCP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_SPINEL_TOTAL,     NCP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_RX_SPINEL_ERR,       NCP_CNTR)
    // IP counters
    NCP_GET_PROP_METHOD(CNTR_IP_TX_SUCCESS,       IP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_IP_RX_SUCCESS,       IP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_IP_TX_FAILURE,       IP_CNTR)
    NCP_GET_PROP_METHOD(CNTR_IP_RX_FAILURE,       IP_CNTR)

    NCP_GET_PROP(MSG_BUFFER_COUNTERS)
    NCP_GET_PROP(DEBUG_TEST_ASSERT)
    NCP_GET_PROP(DEBUG_NCP_LOG_LEVEL)
#if OPENTHREAD_ENABLE_LEGACY
    NCP_GET_PROP(NEST_LEGACY_ULA_PREFIX)
    NCP_GET_PROP(NEST_LEGACY_LAST_NODE_JOINED)
#endif

// End of the property list.

#undef NCP_GET_PROP
#undef NCP_GET_PROP_METHOD
