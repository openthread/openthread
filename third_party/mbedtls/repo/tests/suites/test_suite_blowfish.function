/* BEGIN_HEADER */
#include "mbedtls/blowfish.h"
/* END_HEADER */

/* BEGIN_DEPENDENCIES
 * depends_on:MBEDTLS_BLOWFISH_C
 * END_DEPENDENCIES
 */

/* BEGIN_CASE */
void blowfish_encrypt_ecb( data_t * key_str, data_t * src_str,
                           data_t * hex_dst_string, int setkey_result )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    TEST_ASSERT( mbedtls_blowfish_setkey( &ctx, key_str->x, key_str->len * 8 ) == setkey_result );
    if( setkey_result == 0 )
    {
        TEST_ASSERT( mbedtls_blowfish_crypt_ecb( &ctx, MBEDTLS_BLOWFISH_ENCRYPT, src_str->x, output ) == 0 );

        TEST_ASSERT( hexcmp( output, hex_dst_string->x, 8, hex_dst_string->len ) == 0 );
    }

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE */
void blowfish_decrypt_ecb( data_t * key_str, data_t * src_str,
                           data_t * hex_dst_string, int setkey_result )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    TEST_ASSERT( mbedtls_blowfish_setkey( &ctx, key_str->x, key_str->len * 8 ) == setkey_result );
    if( setkey_result == 0 )
    {
        TEST_ASSERT( mbedtls_blowfish_crypt_ecb( &ctx, MBEDTLS_BLOWFISH_DECRYPT, src_str->x, output ) == 0 );

        TEST_ASSERT( hexcmp( output, hex_dst_string->x, 8, hex_dst_string->len ) == 0 );
    }

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void blowfish_encrypt_cbc( data_t * key_str, data_t * iv_str,
                           data_t * src_str, data_t * hex_dst_string,
                           int cbc_result )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    mbedtls_blowfish_setkey( &ctx, key_str->x, key_str->len * 8 );

    TEST_ASSERT( mbedtls_blowfish_crypt_cbc( &ctx, MBEDTLS_BLOWFISH_ENCRYPT, src_str->len , iv_str->x, src_str->x, output ) == cbc_result );
    if( cbc_result == 0 )
    {

        TEST_ASSERT( hexcmp( output, hex_dst_string->x, src_str->len, hex_dst_string->len ) == 0 );
    }

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CBC */
void blowfish_decrypt_cbc( data_t * key_str, data_t * iv_str,
                           data_t * src_str, data_t * hex_dst_string,
                           int cbc_result )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    mbedtls_blowfish_setkey( &ctx, key_str->x, key_str->len * 8 );
    TEST_ASSERT( mbedtls_blowfish_crypt_cbc( &ctx, MBEDTLS_BLOWFISH_DECRYPT, src_str->len , iv_str->x, src_str->x, output ) == cbc_result );
    if( cbc_result == 0)
    {

        TEST_ASSERT( hexcmp( output, hex_dst_string->x, src_str->len, hex_dst_string->len ) == 0 );
    }

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void blowfish_encrypt_cfb64( data_t * key_str, data_t * iv_str,
                             data_t * src_str, data_t * hex_dst_string
                             )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;
    size_t iv_offset = 0;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    mbedtls_blowfish_setkey( &ctx, key_str->x, key_str->len * 8 );
    TEST_ASSERT( mbedtls_blowfish_crypt_cfb64( &ctx, MBEDTLS_BLOWFISH_ENCRYPT, src_str->len, &iv_offset, iv_str->x, src_str->x, output ) == 0 );

    TEST_ASSERT( hexcmp( output, hex_dst_string->x, src_str->len, hex_dst_string->len ) == 0 );

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CFB */
void blowfish_decrypt_cfb64( data_t * key_str, data_t * iv_str,
                             data_t * src_str, data_t * hex_dst_string
                             )
{
    unsigned char output[100];
    mbedtls_blowfish_context ctx;
    size_t iv_offset = 0;

    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    mbedtls_blowfish_setkey( &ctx, key_str->x, key_str->len * 8 );
    TEST_ASSERT( mbedtls_blowfish_crypt_cfb64( &ctx, MBEDTLS_BLOWFISH_DECRYPT, src_str->len, &iv_offset, iv_str->x, src_str->x, output ) == 0 );

    TEST_ASSERT( hexcmp( output, hex_dst_string->x, src_str->len, hex_dst_string->len ) == 0 );

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */

/* BEGIN_CASE depends_on:MBEDTLS_CIPHER_MODE_CTR */
void blowfish_encrypt_ctr( data_t * key_str, data_t * iv_str,
                           data_t * src_str, data_t * hex_dst_string )
{
    unsigned char stream_str[100];
    unsigned char output[100];
    mbedtls_blowfish_context ctx;
    size_t iv_offset = 0;

    memset(stream_str, 0x00, 100);
    memset(output, 0x00, 100);
    mbedtls_blowfish_init( &ctx );


    mbedtls_blowfish_setkey( &ctx, key_str->x, key_str->len * 8 );
    TEST_ASSERT( mbedtls_blowfish_crypt_ctr( &ctx, src_str->len, &iv_offset, iv_str->x, stream_str, src_str->x, output ) == 0 );

    TEST_ASSERT( hexcmp( output, hex_dst_string->x, src_str->len, hex_dst_string->len ) == 0 );

exit:
    mbedtls_blowfish_free( &ctx );
}
/* END_CASE */
