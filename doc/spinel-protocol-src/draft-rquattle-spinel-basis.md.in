%%%
    title       = "Spinel: A basis for control and management of network interface co-processors"
    abbrev      = "Spinel Basis (@SOURCE_VERSION@)"
    category    = "std"
    docName     = "draft-rquattle-spinel-basis-@SOURCE_VERSION@"
    ipr         = "trust200902"
    keyword     = ["Spinel", "IPv6", "NCP"]
    date        = @SOURCE_DATE@
    
    [pi]
    editing     = "yes"
    private     = "OpenThread"
    compact     = "yes"
    subcompact  = "yes"
    comments    = "yes"
    
    [[author]]
    initials        = "R."
    surname         = "Quattlebaum"
    fullname        = "Robert S. Quattlebaum"
    organization    = "Nest Labs"
    
        [author.address]
        email       = "rquattle@nestlabs.com"
        
        [author.address.postal]
        street      = "3400 Hillview Ave."
        city        = "Palo Alto"
        region      = "California"
        code        = "94304"
        country     = "USA"
    
    [[author]]
    initials        = "j.h."
    surname         = "woodyatt"
    fullname        = "james woodyatt"
    organization    = "Google, Inc."
    role            = "editor"
    
        [author.address]
        email       = "jhw@google.com"
        
        [author.address.postal]
        street      = "3400 Hillview Ave."
        city        = "Palo Alto"
        region      = "California"
        code        = "94304"
        country     = "USA"
%%%

.# Abstract

This document specifies the basis of the Spinel protocol, which facilitates the control and management of IPv6 network interfaces in nodes where general purpose application processors offload network functions at their interfaces to network co-processors (NCP) connected by simple communication links like serial data channels. Spinel was initially designed for use with Thread network co-processors, but its basis is general purpose and intended to be easily adapted to other types of IPv6 network interface.

{mainmatter}

# Introduction #

Spinel is designed to enable the interoperation over simple serial connections between general purpose device operating systems (OS) and network co-processors (NCP) for the purpose of controlling and managing their IPv6 network interfaces, achieving the following goals:

*   Adopt a layered approach to the protocol design, allowing future support for other types of IPv6 link.
*   Minimize the number of required commands/methods by supporting a rich, property-based programming interface.
*   Support NCPs capable of multiple simultaneous IPv6 interfaces.
*   Support NCPs capable of communicating simultaneously on more than one physical link.
*   Gracefully handle the addition of new features and capabilities without necessarily breaking backward compatibility.
*   Be as minimal and light-weight as possible without unnecessarily sacrificing flexibility.

On top of this core framework, properties and commands enable various common features of IPv6. In related and forthcoming documents, the Spinel protocol is extended to support NCP implementations for specific IPv6 link types, e.g. Thread.

## Property Overview ##

Spinel is largely a property-based protocol, similar to representational state transfer (REST), with a property defined for every attribute that an OS needs to create, read, update or delete in the function of an IPv6 interface. The inspiration of this approach was memory-mapped hardware registers for peripherals. The goal is to avoid, as much as possible, the use of large complicated structures and/or method argument lists. The reason for avoiding these is because they have a tendency to change, especially early in development. Adding or removing a property from a structure can render the entire protocol incompatible. By using properties, you simply extend the protocol with an additional property.

Almost all features and capabilities are implemented using properties. Most new features that are initially proposed as commands can be adapted to be property-based instead. Notable exceptions include "Host Buffer Offload" ((#feature-host-buffer-offload)) and "Network Save" ((#feature-network-save)).

In Spinel, properties are keyed by an unsigned integer between 0 and 2,097,151 (See (#packed-unsigned-integer)).

### Property Methods ###

Properties may support one or more of the following methods:

*   `VALUE_GET`
*   `VALUE_SET`
*   `VALUE_INSERT`
*   `VALUE_REMOVE`

Additionally, the NCP can send updates to the host (either synchronously or asynchronously) that inform the host about changes to specific properties:

*   `VALUE_IS`
*   `VALUE_INSERTED`
*   `VALUE_REMOVED`

### Property Types ###

Conceptually, there are three different types of properties:

*   Single-value properties
*   Multiple-value (Array) properties
*   Stream properties

#### Single-Value Properties ####

Single-value properties are properties that have a simple representation of a single value. Examples would be:

*   Current radio channel (Represented as a unsigned 8-bit integer)
*   Network name (Represented as a UTF-8 encoded string)
*   802\.15.4 PAN ID (Represented as a unsigned 16-bit integer)

The valid operations on these sorts of properties are `GET` and `SET`.

#### Multiple-Value Properties ####

Multiple-Value Properties have more than one value associated with them. Examples would be:

*   List of channels supported by the radio hardware.
*   List of IPv6 addresses assigned to the interface.
*   List of capabilities supported by the NCP.

The valid operations on these sorts of properties are `VALUE_GET`, `VALUE_SET`, `VALUE_INSERT`, and `VALUE_REMOVE`.

When the value is fetched using `VALUE_GET`, the returned value is the concatenation of all of the individual values in the list. If the length of the value for an individual item in the list is not defined by the type then each item returned in the list is prepended with a length (See (#arrays)). The order of the returned items, unless explicitly defined for that specific property, is undefined.

`VALUE_SET` provides a way to completely replace all previous values. Calling `VALUE_SET` with an empty value effectively instructs the NCP to clear the value of that property.

`VALUE_INSERT` and `VALUE_REMOVE` provide mechanisms for the insertion or removal of individual items *by value*. The payload for these commands is a plain single value.

#### Stream Properties ####

Stream properties are special properties representing streams of data. Examples would be:

*   Network packet stream ((#prop-stream-net))
*   Raw packet stream ((#prop-stream-raw))
*   Debug message stream ((#prop-stream-debug))
*   Network Beacon stream ((#prop-mac-scan-beacon))

All such properties emit changes asynchronously using the `VALUE_IS` command, sent from the NCP to the host. For example, as IPv6 traffic is received by the NCP, the IPv6 packets are sent to the host by way of asynchronous `VALUE_IS` notifications.

Some of these properties also support the host send data back to the NCP. For example, this is how the host sends IPv6 traffic to the NCP.

These types of properties generally do not support `VALUE_GET`, as it is meaningless.

{{spinel-frame-format.md}}

{{spinel-data-packing.md}}

{{spinel-commands.md}}

{{spinel-prop.md}}

{{spinel-status-codes.md}}

{{spinel-tech-thread.md}}

{{spinel-feature-network-save.md}}

{{spinel-feature-host-buffer-offload.md}}

{{spinel-feature-jam-detect.md}}

{{spinel-feature-gpio.md}}

{{spinel-feature-trng.md}}

{{spinel-security-considerations.md}}

{backmatter}

{{spinel-framing.md}}

{{spinel-test-vectors.md}}

{{spinel-example-sessions.md}}

{{spinel-basis-glossary.md}}

# Acknowledgments #

Special thanks to Abtin Keshavarzian, Martin Turon, Arjuna Sivasithambaresan and Jonathan Hui for their substantial contributions and feedback related to this document.

<!-- Editor
  -- If we have missed anyone who has contributed to this document, please let the editor know ASAP.
  -->

This document was prepared using [mmark](https://github.com/miekg/mmark) by (Miek Gieben) and [xml2rfc (version 2)](http://xml2rfc.ietf.org/).
